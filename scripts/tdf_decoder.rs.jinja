use std::io::{Cursor, Read};

use byteorder::{LittleEndian, ReadBytesExt};

pub fn tdf_name(tdf_id: &u16) -> String
{
    match tdf_id {
{% for tdf_id, info in definitions.items() %}
        {{ tdf_id }} => String::from("{{ info['name'] }}"),
{% endfor %}
        _ => format!("{}", tdf_id),
    }
}

pub fn tdf_fields(tdf_id: &u16) -> Vec<&'static str>
{
    match tdf_id {
{% for tdf_id, info in definitions.items() %}
        {{ tdf_id }} => vec![{{ info['rust_head'] }}],
{% endfor %}
        _ => vec!["unknown"],
    }
}

fn tdf_field_read_string(cursor: &mut Cursor<&[u8]>, size: u8) ->  std::io::Result<String>
{
    let mut buf = vec![0u8; size as usize];
    cursor.read_exact(&mut buf)?;

    match String::from_utf8(buf) {
        Ok(val) => Ok(format!("\"{}\"", val.trim_matches(char::from(0)))),
        Err(..) => Ok(String::from("\"\""))
    }
}

fn tdf_field_read_vla(cursor: &mut Cursor<&[u8]>, cursor_start: u64, size: u8) ->  std::io::Result<String>
{
    let cursor_current = cursor.position();
    let cursor_read = cursor_current - cursor_start;
    let bytes_remaining = size as u64 - cursor_read;
    let mut buf = vec![0u8; bytes_remaining as usize];

    cursor.read_exact(&mut buf)?;
    Ok(format!("{}", hex::encode(buf)))
}

pub fn tdf_read_into_str(tdf_id: &u16, size: u8, cursor: &mut Cursor<&[u8]>) -> std::io::Result<String>
{
    let cursor_start = cursor.position();

    let res = match tdf_id {
{% for tdf_id, info in definitions.items() %}
        {{ tdf_id }} => 
            Ok(format!(
                "{{ info['rust_fmt'] }}",
{% for conv in info['rust_convs'] %}
                {{ conv[1] }},
{% endfor %}
            )),
{% endfor %}
        _ => {
            let mut buf = vec![0; size as usize];
            cursor.read_exact(&mut buf)?;
            Ok(format!("{}", hex::encode(buf)))
        }
    };
    let cursor_end = cursor.position();
    let cursor_read = cursor_end - cursor_start;
    let underflow = size as u64 - cursor_read;

    // Handle read underflow (more data specified than expected)
    if underflow > 0 {
        tdf_field_read_string(cursor, underflow as u8)?;
    }
    res
}
